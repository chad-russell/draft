extern print_i64(n: i64);
extern print_f64(n: f64);
extern print_enum_tag(f: *Baz);
extern malloc(n: i64) *struct{};
extern free(n: *struct{});
extern put_char(ch: u8);
extern print_str(ch: *u8, len: i64);

enum Option {
    None,
    Some: _T!,
}

struct TypeInfoParam {
    name: string,
    ty: *TypeInfo,
}

enum TypeInfo {
    Empty,
    Bool,
    I8,
    I16,
    I32,
    I64,
    U8,
    U16,
    U32,
    U64,
    F32,
    F64,
    String,
    Func: struct {
        name: Option!(T: string),
        inputs: []TypeInfoParam,
        return_ty: Option!(T: *TypeInfo),
    },
    Struct: struct {
        name: Option!(T: string),
        params: []TypeInfoParam,
    },
    Enum: struct {
        name: Option!(T: string),
        params: []TypeInfoParam,
    },
    Pointer: *TypeInfo,
    Array: struct {
        elem_ty: *TypeInfo,
        len: Option!(T: i64),
    },
}

fn heapify(v: _T!) *T {
    let a = #cast(*T) malloc(#size_of(T));
    *a = v;
    return a;
}

fn freeify(v: *_T!) {
    free(#cast v);
    return;
}

struct Foo {
    x: i64, 
    y: i64,
}

struct Bar {
    x: i64, 
    y: i64,
}

enum Baz {
    A,
    B: i64,
    C: struct { x: i64, y: i64 },
}

fn foo1(f: _) _ {
    return f.x + f.y;
}

fn foo2(f: !) _ {
    return f.x + f.y;
}

fn foo3(f: *_) _ {
    return f.x + f.y;
}

fn foo4(f: *!) _ {
    return f.x + f.y + foo3(f);
}

fn foo5(f: *_T!, g: _U!) _ {
    return f.x - f.y + g.x + g.y;
}

fn foo6() Foo {
    return _{ 10, 2 };
}

fn id(n: i64) i64 {
    return n;
}

fn idp(n: *i64) i64 {
    return *n;
}

fn idppp(n: ***i64) i64 {
    return ***n;
}

fn fac(n: i64) i64 {
    if n == 1 {
        return n;
    } else {
        return n * fac(n - 1);
    }
}

struct List {
    value: i64,
    next: *List,
}

struct Vec {
    data: *_T!,
    len: i64,
}

fn vec_new() Vec! {
    let v: Vec!;
    v.len = 0;
    return v;
}

fn vec_len(v: *Vec!(T: Vec!(T: f64))) i64 {
    return v.len;
}

fn test_vec_stuff_1() i64 { 
    let v1 = vec_new();
    v1.data = &0.0f64;

    let v2 = Vec { data: &v1, len: 26 };
    print_i64(vec_len(&v2));

    return 0;
}

// Declare the interafce itself
struct IDoThing {
    data: *_T!,
    vtable: struct {
        do_thing: fn(n: *T) i64,
    },
}

fn do_thing(i: IDoThing!(T: _T!)) _ {
    return i.vtable.do_thing(i.data);
}

// Define and implement the interface for IFoo
struct IFoo {
    x: i64,
}

fn foo_to_interface(foo: *IFoo) _ {
    return IDoThing {
        data: foo,
        vtable: _{
            do_thing: fn(foo: *IFoo) i64 {
                return foo.x;
            },
        },
    };
}

// Define and implement the interface for IBar
struct IBar {
    x: i64,
    y: i64,
}

fn test_interfaces() i64 {
    &IFoo { 42 } |> foo_to_interface |> do_thing |> print_i64;
    
    let b = IBar { x: 1, y: 2 };
    let i2 = IDoThing { &b, _{ fn(bar: *IBar) i64 { return bar.x + bar.y; } } };
    i2 |> do_thing |> print_i64;

    return 0;
}

fn test_for_array() i64 {
    let arr: [_]_T = [_{x: 1i64, y: 1.1f64}, _{2, 2.2}, _{3, 3.3}];

    for val in arr {
        val.x = 999;
    }

    for val in arr {
        print_i64(val.x);
        print_f64(val.y);
    }

    return 0;
}

fn test_for_dynamic_array() i64 {
    let arr: []_T = [_{x: 1i64, y: 1.1f64}, _{2, 2.2}, _{3, 3.3}] as []T;

    for val in arr {
        val.x = 999;
    }

    for val in arr {
        print_i64(val.x);
        print_f64(val.y);
    }

    return 0;
}

fn test_for_array_manual() i64 {
    let datas = &_{
        d1: _{x: 1i64, y: 1.1f64}, 
        d2: _{2i64, 2.2f64}, 
        d3: _{3i64, 3.3f64},
    };

    let arr: []struct{x: i64, y: f64} = _{ data: #cast(*_) datas, len: 3i64 } as []_;

    for val in arr {
        val.x = 999;
    }

    for val in arr {
        print_i64(val.x);
        print_f64(val.y);
    }

    return 0;
}

fn add_one(n: i64) i64 {
    return n + 1;
}

fn add_two(m: i64, n: i64) i64 {
    return m + n;
}

fn test_threading() i64 {
    print_i64(3i64 |> add_two(8) |> add_two(8) |> add_one);
    return 0;
}

fn print_string(s: string) {
    print_str(s.data, s.len);
    return;
}

fn assert_equal(a: _T!, b: T) {
    if a != b {
        print_string("assertion failed\n");
    }
    return;
}

fn sub(a: i64, b: i64) i64 {
    return b;
}

fn test_static_array_len() {
    let a: [_]i64 = [1, 2, 3, 4, 5];
    a::len |> print_i64;

    return;
}

fn schange_array(a: [_]i64) {
    a[2] = 5;
    print_i64(a[2]);
    return;
}

fn change_array(a: []i64) {
    a[2] = 5;
    print_i64(a[2]);
    return;
}

fn test_array_casts() i64 {
    let a = [1i64, 2, 3];

    schange_array(a);
    print_i64(a[2]);

    let b: []i64 = a as _;
    change_array(b);
    print_i64(b[2]);
    print_i64(a[2]);

    let c = _{ data: #cast(*_) &a, len: a::len };
    let d = c as []_;
    change_array(d);
    
    c = _{ data: b.data, len: b.len };
    d = c as []_;
    change_array(d);
    
    return 0;
}

fn test_transparent() {
    struct Foo {
        x: i64,
        y: i64,
    }

    struct Bar {
        ohno_bar: i64,
        #transparent foo: *Foo,
    }

    struct Baz {
        ohno_baz: i64,
        #transparent bar: Bar,
    }

    struct Qux {
        ohno_qux: i64,
        #transparent baz: Baz,
    }
    
    // let #transparent f = Foo { 1, 2 };
    // let #transparent b = Bar { 999, Foo { 1, 2 } };
    // let #transparent b = Baz { 999, Bar { 999, Foo { 1, 2 } } };
    let #transparent q = Qux { 999, Baz { 999, Bar { 999, &Foo { 1, 2 } } } };
    y |> print_i64;

    let b = Bar { 33, &Foo { 1, 2 } };
    (b.foo.x + 20) |> print_i64;
    (b.x + 20) |> print_i64;
    (x + 20) |> print_i64;

    return;
}

fn test_transparent2() {
    struct Foo {
        m: i64,
        n: i64,
    }

    struct Bar {
        x: i64,
        y: i64,
        #transparent f: Foo,
    }
    
    let #transparent b = Bar { 1, 2, Foo { m: 3, n: 4 } };
    print_i64(b.x);
    print_i64(b.y);
    print_i64(b.f.m);
    print_i64(b.f.n);
    print_i64(b.m);
    print_i64(b.n);
    print_i64(x);
    print_i64(y);
    print_i64(f.m);
    print_i64(f.n);
    print_i64(m);
    print_i64(n);
    
    return;
}

fn test_arrow_threading() {
    struct Foo {
        m: i64,
        n: i64,
        #transparent vtable: *Foo_Vtable,
    }

    fn add_one_foo(foo: *Foo) *Foo {
        // print_string("Adding one!\n");
        foo.m = foo.m + 1;
        foo.n = foo.n + 1;
        return foo;
    }

    struct Foo_Vtable {
        sum: fn(this: *Foo) i64,
        diff: fn(this: *Foo) i64,
        modify: fn(this: *Foo) *Foo,
    }

    let foo = Foo {
        m: 1,
        n: 2,
        vtable: &_{
            sum: fn(this: *Foo) i64 { return this.m + this.n; },
            diff: fn(this: *Foo) i64 { return this.m - this.n; },
            modify: add_one_foo,
        },
    };

    print_i64(&foo->modify->modify->sum);

    return;
}

fn test_vtable_stuff1() i64 {
    struct VTable {
        modify: fn(this: *_T!) *T,
        sum: fn(this: *T) i64,
    }

    struct Foo {
        x: i64,
    }

    #transparent fn get_vtable() *VTable!(T: Foo) {
        return heapify(VTable {
            modify: fn(this: *Foo) *Foo {
                this.x = this.x + 1;
                return this;
            },
            sum: fn(this: *Foo) i64 {
                return this.x;
            }
        });
    }

    let f: Foo;
    f.x = 8;

    &f |> modify |> modify |> sum |> print_i64;

    return 0;
}

fn test_propagate() i64 {
    struct Foo {
        x: i64,
        y: i64,
    }

    fn add(foo: *Foo) i64 {
        return foo.x + foo.y;
    }

    fn propagate(\foo: *Foo) i64 {
        return add();
    }

    struct Bar {
        foo: *Foo,
    }

    fn uhoh(\foo: *Foo) {
        let g = Bar {};
        return;
    }
    
    let \foo = &Foo { x: 8, y: 3 };

    propagate() |> print_i64;

    uhoh();

    return 0;
}

fn test_if_let() {
    let a: Option!(T: i64) = Option::Some(3);
    if let None = a {
        print_string("ERROR\n");
    } else if let Some(s) = a {
        print_i64(22);
        print_i64(s);
    } else {
        print_string("ERROR\n");
    }

    return;
}

fn transparent_polymorph() {
    struct Foo {
        x: i64, 
       y: i64,
    }

    enum Option {
        #transparent Some: _T!,
        None: i64,
    }

    let #transparent o = Option::Some(Foo { 2, 3 });

    x |> print_i64;

    return;
}

fn main() i64 {
    {
        let te1 = 3i64;
        let te2 = 3;
        assert_equal(te1, te2);
    };
    
    let f = Foo { 3, 8 };
    let pf = &f;
    let ppf = &pf;

    print_i64(foo1(f) - 10); // 1
    print_i64(foo2(f) - 9); // 2
    print_i64(foo3(&f) - 8); // 3
    print_i64(foo4(&f) - 18); // 4
    print_i64(foo4(pf) - 17); // 5
    print_i64(foo4(*&pf) - 16); // 6
    print_i64(foo4(*&*&*&*&*&pf) - 15); // 7

    f = Foo { y: 3, x: 8 };
    print_i64(f.x - f.y + 3); // 8

    let g = Bar { 3, 8 };
    let pg = &&&&&&g;
    print_i64(foo5(&f, *pg) - ****&&&&7); // 9

    let ten = &&&999;
    **ten = &10;
    print_i64(***ten); // 10
    
    ***ten = 11;
    print_i64(***ten); // 11

    let f6 = foo6();
    print_i64(f6.x + f6.y); // 12
    
    let fa = Baz::A();
    let make_b = Baz::B;
    let fb = make_b(6);
    let fc = Baz::C(_{ 888, 999 });

    print_enum_tag(&fa);
    print_enum_tag(&fb);
    print_enum_tag(&fc);
    
    let a = false;
    if a {
        print_i64(999);
    } else if a {
        print_i64(999);
    } else if a {
        print_i64(999);
    } else if a {
        print_i64(999);
    } else if a {
        print_i64(999);
    } else {
        print_i64(15);
    }

    print_i64(id(16)); // 16
    print_i64(idp(&17)); // 17
    print_i64(idppp(*&&&&18)); // 18
    
    print_i64(fac(4));

    let lst: List;
    lst.value = 999;
    lst.next = &lst;
    lst.next.next.next.next.next.value = 21;
    print_i64(lst.next.next.next.next.next.next.next.next.next.value);

    let if_test = if false { 
        break 999; 
    } else if false { 
        break 999; 
    } else if true { 
        break 22; 
    } else { 
        break 999; 
    };
    print_i64(if_test);

    let block_test = {
        print_i64(22);
        break if false {
            break 999;
        } else {
            break 3;
        };
    };
    print_i64(block_test);

    struct PStruct {
        a: _T!,
        b: T,
    }
    let pstruct = PStruct { a: 11, b: 12 };
    print_i64(pstruct.a + pstruct.b);
    
    test_vec_stuff_1();
    
    test_interfaces();
    
    test_for_array();

    test_for_dynamic_array();

    test_for_array_manual();
    
    test_threading();
    
    4 |> sub(3, @) |> print_i64;
    
    test_static_array_len();

    test_array_casts();

    test_transparent();

    test_transparent2();

    test_arrow_threading();

    test_propagate();

    test_if_let();

    transparent_polymorph();

    return 0;
}
