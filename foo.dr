extern print_i64(n: i64);
extern print_str(ch: *u8, len: i64);
extern malloc(n: i64) *struct{};

fn print_string(s: string) {
    print_str(s.data, s.len);
    return;
}

fn heapify(v: _T!) *T {
    let a = #cast(*T) malloc(#size_of(T));
    *a = v;
    return a;
}

struct VTable {
    modify: fn(this: *_T!) *T,
    sum: fn(this: *T) i64,
}

struct Foo {
    x: i64,
}

#transparent fn get_vtable() *VTable!(T: Foo) {
    return heapify(VTable {
        modify: fn(this: *Foo) *Foo {
            this.x = this.x + 1;
            return this;
        },
        sum: fn(this: *Foo) i64 {
            return this.x;
        }
    });
}

fn main() i64 {
    let f: Foo;
    f.x = 8;

    &f |> modify |> modify |> sum |> print_i64;

    return 0;
}